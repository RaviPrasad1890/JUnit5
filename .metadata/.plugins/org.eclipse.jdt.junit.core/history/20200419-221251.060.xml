<?xml version="1.0" encoding="UTF-8"?><testrun name="StringTest" project="jUnit5" tests="15" started="15" failures="1" errors="0" ignored="0">
  <testsuite name="com.ravi.junit5.StringTest" time="0.125" displayname="StringTest" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]">
    <testsuite name="testParemetrizedFromCsv(com.ravi.junit5.StringTest)" time="0.0" displayname="testParemetrizedFromCsv(String, String)" parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]">
      <testcase name="testParemetrizedFromCsv" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[1] abcde, ABCDE" parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]/[test-template-invocation:#1]"/>
      <testcase name="testParemetrizedFromCsv" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[2] ," parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]/[test-template-invocation:#2]"/>
      <testcase name="testParemetrizedFromCsv" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[3] abc, ABC" parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]/[test-template-invocation:#3]"/>
      <testcase name="testParemetrizedFromCsv" classname="com.ravi.junit5.StringTest" time="0.047" dynamicTest="true" displayname="[4] ravi, Ravi" parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]/[test-template-invocation:#4]">
        <failure>
          <expected>Ravi</expected>
          <actual>RAVI</actual>org.opentest4j.AssertionFailedError: expected: &lt;Ravi&gt; but was: &lt;RAVI&gt;&#13;
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)&#13;
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:195)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:184)&#13;
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:179)&#13;
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1124)&#13;
	at com.ravi.junit5.StringTest.testParemetrizedFromCsv(StringTest.java:112)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:628)&#13;
	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:117)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:184)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:180)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:127)&#13;
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:198)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:136)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:104)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$11$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$11$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.Spliterators$ArraySpliterator.forEachRemaining(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline.forEach(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$3$1.accept(Unknown Source)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline.forEach(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline$7$1.accept(Unknown Source)&#13;
	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.copyInto(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)&#13;
	at java.util.stream.AbstractPipeline.evaluate(Unknown Source)&#13;
	at java.util.stream.ReferencePipeline.forEach(Unknown Source)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:104)&#13;
	at org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:40)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(Unknown Source)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at java.util.ArrayList.forEach(Unknown Source)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)&#13;
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)&#13;
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)&#13;
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)&#13;
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)&#13;
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)&#13;
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:137)&#13;
	at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:89)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testParemetrizedFromCsv" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[5] xyz, XYZ" parameters="java.lang.String,java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testParemetrizedFromCsv(java.lang.String, java.lang.String)]/[test-template-invocation:#5]"/>
    </testsuite>
    <testcase name="testSplit" classname="com.ravi.junit5.StringTest" time="0.016" displayname="testSplit()" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testSplit()]"/>
    <testsuite name="testBasicParameterizedTest(com.ravi.junit5.StringTest)" time="0.0" displayname="testBasicParameterizedTest(String)" parameters="java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testBasicParameterizedTest(java.lang.String)]">
      <testcase name="testBasicParameterizedTest" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[1] ABCD" parameters="java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testBasicParameterizedTest(java.lang.String)]/[test-template-invocation:#1]"/>
      <testcase name="testBasicParameterizedTest" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[2] ABC" parameters="java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testBasicParameterizedTest(java.lang.String)]/[test-template-invocation:#2]"/>
      <testcase name="testBasicParameterizedTest" classname="com.ravi.junit5.StringTest" time="0.015" dynamicTest="true" displayname="[3] DE" parameters="java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testBasicParameterizedTest(java.lang.String)]/[test-template-invocation:#3]"/>
      <testcase name="testBasicParameterizedTest" classname="com.ravi.junit5.StringTest" time="0.0" dynamicTest="true" displayname="[4] dsdsh" parameters="java.lang.String" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[test-template:testBasicParameterizedTest(java.lang.String)]/[test-template-invocation:#4]"/>
    </testsuite>
    <testcase name="testContains" classname="com.ravi.junit5.StringTest" time="0.0" displayname="testContains()" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testContains()]"/>
    <testcase name="testLengthException" classname="com.ravi.junit5.StringTest" time="0.0" displayname="testLengthException()" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testLengthException()]"/>
    <testcase name="testStringEquals" classname="com.ravi.junit5.StringTest" time="0.016" displayname="When I/P String is null, throw an Exception" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testStringEquals()]"/>
    <testcase name="testLengthBasic" classname="com.ravi.junit5.StringTest" time="0.0" displayname="testLengthBasic()" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testLengthBasic()]"/>
    <testcase name="testToUppercaseBasic" classname="com.ravi.junit5.StringTest" time="0.0" displayname="testToUppercaseBasic()" uniqueid="[engine:junit-jupiter]/[class:com.ravi.junit5.StringTest]/[method:testToUppercaseBasic()]"/>
  </testsuite>
</testrun>
