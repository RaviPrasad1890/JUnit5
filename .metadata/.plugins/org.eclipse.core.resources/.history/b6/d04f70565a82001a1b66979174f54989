package com.ravi.junit5;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

class StringTest {
	
	
	//@BeforeAll and @AfterAll must be used with static method
	@BeforeAll
	static void beforeAll() {		
		System.out.println("Connect to DB or do some other data setup");
	}	
	@AfterAll
	static void afterAll() {
		System.out.println("flush all connection");
	}
	
	/*
	@BeforeEach
	void beforeEach() {
		//Initialize test data before execution of each method
		System.out.println("Run before execution of each method");
	}
	
	@AfterEach
	void afterEach() {
		//Reset test data after execution of each method
		System.out.println("Run after each method");
	}
	*/
	
	//Parameterized version of beforeEach and afterEach
	@BeforeEach
	void beforeEach(TestInfo info) {
		System.out.println("Initialize test data for "+info.getDisplayName());
	}
	
	@AfterEach
	void afterEach(TestInfo info) {
		System.out.println("Clean up test data for "+info.getDisplayName());
	}
	
	/*
	@Test
	void whatEverNameYouWant() {
		fail("Not yet implemented");
		//Absence of failure is success
		
		//Step 1: Write Test Code(Prepare data)
		//Step 2: Invoke method--Square(40)=> Code under test
		//Step 3: Put Checks-16=> Assertion
	}

	 */
	
	@Test
	void testLengthBasic() {
		int actualLength="ABCD".length();
		int expectedLength=4;
		assertEquals(expectedLength, actualLength);
	}
	
	@Test
	void testToUppercaseBasic() {
		String str= "match";
		String res=str.toUpperCase();
		assertEquals("MATCH",res);
	}
	
	@Test
	void testContains() {
		String str= "abcdefgh";
		boolean res=str.contains("bcd");
		//assertEquals(true,res);
		assertTrue(res);
		//Similarly we have below assert methods:
		//assertFalse,assertNull,assertNotNull
		
	}
	
	@Test
	void testSplit() {
		String str="abc def ghi jkl";
		String actualResult[] = str.split(" ");
		String[] expectedResult= {"abc","def","ghi","jkl"};
		assertArrayEquals(expectedResult,actualResult);
		//We can use assertEquals but assertEqualsArray will give
		//more specific message related to failure
		
	}
	
	//Tricks
	@Test
	void testLengthException() {
		String str=null;
		assertThrows(NullPointerException.class,
				()->{
					str.length();
					}
				);
		
	}
	
}
